import { componentsPromise } from '@/components';
import { embeds, colorsDecimal } from '@/constants';
import { Nullable } from '@/types';
import { makeDefaultEmbed } from '@/utils/makeEmbed';
import {
  ChatInputCommandInteraction,
  CategoryChannel,
  TextChannel,
  ActionRowBuilder,
  ButtonBuilder,
} from 'discord.js';

export const orderMainSetHandler = async (
  i: ChatInputCommandInteraction,
  category: Nullable<CategoryChannel>,
  channel: Nullable<TextChannel>,
  message: Nullable<boolean>,
) => {
  const { user } = i;

  if ([category, channel, message].every(v => v === null)) {
    return i.editReply({
      embeds: [embeds.error(user, 'üö´ –ù–µ –≤–∫–∞–∑–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!')],
    });
  }

  if (message) {
    // TODO:
    // Create a message embed for the order channel
    // This should include instructions on how to use the order system
    const embed = makeDefaultEmbed(colorsDecimal.Info, {
      title: 'üì¶ –°–∏—Å—Ç–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å',
      description:
        '–í—ñ—Ç–∞—î–º–æ —É —Å–∏—Å—Ç–µ–º—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å! –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –Ω–∏–∂—á–µ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π –∫–∞–±—ñ–Ω–µ—Ç.',
      fields: [
        {
          name: '–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó',
          value:
            '1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–∞–±—ñ–Ω–µ—Ç".\n2. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É –∑ –≤–∞—à–∏–º–∏ –¥–∞–Ω–∏–º–∏.\n3. –ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–±—ñ–Ω–µ—Ç—É, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.',
          inline: false,
        },
        {
          name: '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞',
          value:
            '–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó —Å–µ—Ä–≤–µ—Ä–∞.',
          inline: false,
        },
      ],
    });

    const { exactMap } = await componentsPromise;

    await (i.channel as TextChannel)!.send({
      embeds: [embed],
      components: [
        new ActionRowBuilder<ButtonBuilder>().addComponents(
          exactMap.get('createOrderChannel')!.data as ButtonBuilder,
          exactMap.get('infoOrder')!.data as ButtonBuilder,
          exactMap.get('infoPrice')!.data as ButtonBuilder,
        ),
      ],
    });
  }

  const finalMessage = `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å: ${category ? category.name : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
  –ö–∞–Ω–∞–ª –∑–∞–º–æ–≤–ª–µ–Ω—å: ${channel ? channel.name : '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
  –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${message ? '–¢–∞–∫' : '–ù—ñ'}`;

  await i.editReply({
    embeds: [embeds.success(user, `‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω—å –æ–Ω–æ–≤–ª–µ–Ω–æ:\n${finalMessage}`)],
  });

  // TODO:
  // GuildID database check initialization
  // If guildId exists, update the settings
  // If not, create a new entry with the provided settings

  // TODO:
  // CategoryId and ChannelId database check initialization
  // If category and channel are provided, update the settings
  // If not, write the initialization into DB
};
